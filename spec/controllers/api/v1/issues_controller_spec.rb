require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
RSpec.describe Api::V1::IssuesController, type: :controller do

    let(:user) do
      FactoryGirl.create :user
    end

    before do
      @user = User.first
      @customer = FactoryGirl.create(:customer, user_id: @user.id)
    end

  # This should return the minimal set of attributes required to create a valid
  # Issue. As you add validations to Issue, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {"customer_id": @customer.id, "title": "Issue in creating", "description": "It should have been simpler"}
  }

  let(:invalid_attributes) {
    {"title": "Issue in creating", "description": "It should have been simpler"}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # IssuesController. Be sure to keep this updated too.
  let(:valid_session) { {} }
  describe "GET #index" do
    it "assigns all issues as @issues" do
      issue = Issue.create! valid_attributes
      get :index, params: {customer_id: issue.customer_id}, session: valid_session
      expect(assigns(:issues)).to eq([issue])
    end
  end

  describe "GET #show" do
    it "assigns the requested issue as @issue" do
      issue = Issue.create! valid_attributes
      get :show, params: {id: issue.id}, session: valid_session
      expect(assigns(:issue)).to eq(issue)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Issue" do
        expect {
          post :create, params: valid_attributes, session: valid_session
        }.to change(Issue, :count).by(1)
      end

      it "assigns a newly created issue as @issue" do
        post :create, params: valid_attributes, session: valid_session
        expect(assigns(:issue)).to be_a(Issue)
        expect(assigns(:issue)).to be_persisted
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved issue as @issue" do
        post :create, params: invalid_attributes, session: valid_session
        expect(assigns(:issue)).to be_nil
      end

      it "re-renders the 'new' template" do
        post :create, params: invalid_attributes, session: valid_session
        expect(response.status).to be 400
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {status: "assigned", executive_id: 1}
      }

      it "updates the requested issue" do
        issue = Issue.create! valid_attributes
        put :update, params: new_attributes.merge({id: issue.to_param}), session: valid_session
        issue.reload
        expect(issue.status).to eq "assigned"
        expect(issue.executive_id).to eq 1
      end

      it "assigns the requested issue as @issue" do
        issue = Issue.create! valid_attributes
        put :update, params: {id: issue.to_param, issue: valid_attributes}, session: valid_session
        expect(assigns(:issue)).to eq(issue)
      end
    end

    context "with invalid params" do
      it "assigns the issue as @issue" do
        issue = Issue.create! valid_attributes
        put :update, params: {id: issue.to_param, issue: invalid_attributes}, session: valid_session
        expect(assigns(:issue)).to eq(issue)
      end
    end
  end
end
